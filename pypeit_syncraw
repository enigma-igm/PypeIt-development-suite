#!/usr/bin/env python3
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
This script runs the PypeIt development suite of tests
"""

import shutil
import os
import subprocess

from pkg_resources import resource_filename

from IPython import embed


def parser(options=None):
    import argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Sync/copy the RAW_DATA')

    parser.add_argument('developer', type=str, default=None, help='Developer (jxp)')
    parser.add_argument('-c', '--copy', default=False, action='store_true',
                        help='Use copy instead of sync')
    parser.add_argument('-d', '--dryrun', default=False, action='store_true',
                        help='Only list the steps')
    parser.add_argument('-p', '--print', default=False, action='store_true',
                        help='Print the command')

    return parser.parse_args() if options is None else parser.parse_args(options)


def main():

    pargs = parser()

    if pargs.copy:
        command = 'copy'
    else:
        command = 'sync'

    #
    if pargs.developer == 'jxp':
        raw_path = 'GoogleDrive:Astronomy/UCO/PypeIt/PypeIt-development-suite/RAW_DATA'
        calib_path = 'GoogleDrive:Astronomy/UCO/PypeIt/Calibrations'
    elif pargs.developer == 'rjc':
        raw_path = 'PypeIt:RAW_DATA'
        calib_path = None
    elif pargs.developer == 'jfh':
        raw_path = '/mnt/quasar/joe/google_drive/PypeIt-development-suite/RAW_DATA'
        calib_path = None


    # Do it
    praw = ['rclone', command, raw_path, 'RAW_DATA', '-v']
    pnires1, pnires2, ptell, ptell2 = None, None, None, None
    if calib_path is not None:
        # Tellurics
        ptell = ['rclone', command, calib_path+'/Telluric', 'Telluric', '-v']
        tell_path = os.path.join(resource_filename('pypeit', 'data'), 'telluric')
        ptell2 = ['mv', 'Telluric/*.*', tell_path]

    if pargs.dryrun:
        for p in [praw, pnires1, ptell]:
            if p is None:
                continue
            p += ['--dry-run']
    for p in [praw, pnires1, pnires2, ptell, ptell2]:
        if p is None:
            continue
        # Only execute these if the clone was performed
        if p in [pnires2, ptell2] and pargs.dryrun:
            continue
        if pargs.print:
            print(' '.join(p))
            return
        subprocess.run(p, check=True)

    # Clean up?
    if ptell is not None:
        shutil.rmtree('Telluric/')


if __name__ == '__main__':
    # Check for rclone
    if not any([os.access(os.path.join(path, 'rclone'), os.X_OK)
                for path in os.environ["PATH"].split(os.pathsep)]):
        raise RuntimeError("You need to install rclone in your PATH")

    # Giddy up
    main()



