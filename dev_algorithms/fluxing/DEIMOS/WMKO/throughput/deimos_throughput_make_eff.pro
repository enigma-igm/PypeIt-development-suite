;------------------------------------------------------------------------
function read_sensstd_sav_file, infile, extract, fextract, sensstd
;------------------------------------------------------------------------
; Purpose: given the name of a SAV file, read it and return the
; contents of the 'extract' struct.
;------------------------------------------------------------------------

status = 1B                     ; good

;; create initial values...
extract  = 0B
fextract = 0B
sensstd  = 0B

;; the 'restore' command loads the contents of the SAV file.  If it
;; was correctly generated, it contains a structures called
;; extract, fextract, sensstd...
restore, infile

if size( extract, /tname) ne 'STRUCT' then begin
    message, 'WARNING: there is no struct named EXTRACT in file '+file, /info
    status = 0B
endif 

if size( fextract, /tname) ne 'STRUCT' then begin
    message, 'WARNING: there is no struct named EXTRACT in file '+file, /info
    status = 0B
endif 

if size( sensstd, /tname) ne 'STRUCT' then begin
    message, 'WARNING: there is no struct named EXTRACT in file '+file, /info
    status = 0B
endif 

return, status
end

;------------------------------------------------------------------------
pro deimos_throughput_make_eff, infile, outfile
;------------------------------------------------------------------------
; Purpose:
;       Given a SAV file with CALIB data, compute the efficiency
;       within various passbands and create a new structure called
;       EFF.  Save results to specified file.
;------------------------------------------------------------------------

message, 'Reading '+infile, /info

;; read previous results...
status = read_sensstd_sav_file (infile, extract, fextract, sensstd)
if ~ status then begin
    message, 'bad input -- skipping file '+infile, /info
    return
endif 

;; specify set of wavelengths at which to measure change over time,
;; plus an array of widths and an array to hold measurements...
lambda_eff = [5000., 6200., 8000., 9000.]
dlambda_eff = [500., 500., 500., 500.]
n_passbands = n_elements(lambda_eff)
efficiency = fltarr(n_passbands)

;; define a struct to hold passband info...
foo = {PARAMS, $
       lambda_eff:0., $
       dlambda_eff:0., $
       efficiency:0. }

efficiency = replicate ( foo, n_passbands)
for i=0,n_passbands-1 do begin
    efficiency[i].lambda_eff = lambda_eff[i]
    efficiency[i].dlambda_eff = dlambda_eff[i]
endfor 

;; get the wavelength and efficiency data...
wav = sensstd.wav
eff = sensstd.eff

;; compute results...
deimos_throughput_get_efficiency, wav, eff, efficiency, /VERB

;; save results...
save, extract, fextract, sensstd, efficiency, filename=outfile, $
      description='Generated by deimos_throughput_make_eff.pro', $
      /verbose
message, 'Writing '+outfile, /info
end
